# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class SurveyActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Survey]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Survey.prisma().query_raw(
            'SELECT * FROM Survey WHERE SurveyID = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Survey
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Survey.prisma().query_first(
            'SELECT * FROM Survey WHERE PersonID = $1',
            377401575,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SurveyCreateInput,
        include: Optional[types.SurveyInclude] = None
    ) -> _PrismaModelT:
        """Create a new Survey record.

        Parameters
        ----------
        data
            Survey record data
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The created Survey record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Survey record from just the required fields
        survey = await Survey.prisma().create(
            data={
                # data to create a Survey record
                'PersonID': 662824084,
                'Timestamp': datetime.datetime.utcnow(),
                'Title': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SurveyCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Survey records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Survey record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Survey.prisma().create_many(
            data=[
                {
                    # data to create a Survey record
                    'PersonID': 2035015474,
                    'Timestamp': datetime.datetime.utcnow(),
                    'Title': 'dgiiaaijj',
                },
                {
                    # data to create a Survey record
                    'PersonID': 1508029952,
                    'Timestamp': datetime.datetime.utcnow(),
                    'Title': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SurveyWhereUniqueInput,
        include: Optional[types.SurveyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Survey record.

        Parameters
        ----------
        where
            Survey filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The deleted Survey record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        survey = await Survey.prisma().delete(
            where={
                'SurveyID': 1062517886,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SurveyWhereUniqueInput,
        include: Optional[types.SurveyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Survey record.

        Parameters
        ----------
        where
            Survey filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The found Survey record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        survey = await Survey.prisma().find_unique(
            where={
                'SurveyID': 267834847,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SurveyWhereUniqueInput,
        include: Optional[types.SurveyInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Survey record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Survey filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The found Survey record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        survey = await Survey.prisma().find_unique_or_raise(
            where={
                'SurveyID': 180171308,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
        include: Optional[types.SurveyInclude] = None,
        order: Optional[Union[types.SurveyOrderByInput, List[types.SurveyOrderByInput]]] = None,
        distinct: Optional[List[types.SurveyScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Survey records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Survey records returned
        skip
            Ignore the first N results
        where
            Survey filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Survey model
        order
            Order the returned Survey records by any field
        distinct
            Filter Survey records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Survey]
            The list of all Survey records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Survey records
        surveys = await Survey.prisma().find_many(take=10)

        # find the first 5 Survey records ordered by the Timestamp field
        surveys = await Survey.prisma().find_many(
            take=5,
            order={
                'Timestamp': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
        include: Optional[types.SurveyInclude] = None,
        order: Optional[Union[types.SurveyOrderByInput, List[types.SurveyOrderByInput]]] = None,
        distinct: Optional[List[types.SurveyScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Survey record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Survey filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Survey model
        order
            Order the returned Survey records by any field
        distinct
            Filter Survey records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Survey
            The first Survey record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Survey record ordered by the Title field
        survey = await Survey.prisma().find_first(
            skip=1,
            order={
                'Title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
        include: Optional[types.SurveyInclude] = None,
        order: Optional[Union[types.SurveyOrderByInput, List[types.SurveyOrderByInput]]] = None,
        distinct: Optional[List[types.SurveyScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Survey record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Survey filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Survey model
        order
            Order the returned Survey records by any field
        distinct
            Filter Survey records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Survey
            The first Survey record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Survey record ordered by the SurveyID field
        survey = await Survey.prisma().find_first_or_raise(
            skip=1,
            order={
                'SurveyID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SurveyUpdateInput,
        where: types.SurveyWhereUniqueInput,
        include: Optional[types.SurveyInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Survey record.

        Parameters
        ----------
        data
            Survey record data specifying what to update
        where
            Survey filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The updated Survey record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        survey = await Survey.prisma().update(
            where={
                'SurveyID': 836760821,
            },
            data={
                # data to update the Survey record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SurveyWhereUniqueInput,
        data: types.SurveyUpsertInput,
        include: Optional[types.SurveyInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Survey filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Survey model

        Returns
        -------
        prisma.models.Survey
            The created or updated Survey record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        survey = await Survey.prisma().upsert(
            where={
                'SurveyID': 595337866,
            },
            data={
                'create': {
                    'SurveyID': 595337866,
                    'PersonID': 1508029952,
                    'Timestamp': datetime.datetime.utcnow(),
                    'Title': 'eigcfgbif',
                },
                'update': {
                    'PersonID': 1508029952,
                    'Timestamp': datetime.datetime.utcnow(),
                    'Title': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SurveyUpdateManyMutationInput,
        where: types.SurveyWhereInput,
    ) -> int:
        """Update multiple Survey records

        Parameters
        ----------
        data
            Survey data to update the selected Survey records to
        where
            Filter to select the Survey records to update

        Returns
        -------
        int
            The total number of Survey records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Survey records
        total = await Survey.prisma().update_many(
            data={
                'PersonID': 790425851
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Survey records present in the database

        Parameters
        ----------
        select
            Select the Survey fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Survey filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SurveyCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Survey.prisma().count()

        # results: prisma.types.SurveyCountAggregateOutput
        results = await Survey.prisma().count(
            select={
                '_all': True,
                'Timestamp': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SurveyCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
    ) -> types.SurveyCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SurveyCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SurveyWhereInput] = None,
        cursor: Optional[types.SurveyWhereUniqueInput] = None,
    ) -> Union[int, types.SurveyCountAggregateOutput]:
        """Count the number of Survey records present in the database

        Parameters
        ----------
        select
            Select the Survey fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Survey filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SurveyCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Survey.prisma().count()

        # results: prisma.types.SurveyCountAggregateOutput
        results = await Survey.prisma().count(
            select={
                '_all': True,
                'Title': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SurveyCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SurveyWhereInput] = None
    ) -> int:
        """Delete multiple Survey records.

        Parameters
        ----------
        where
            Optional Survey filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Survey records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Survey records
        total = await Survey.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SurveyScalarFieldKeys'],
        *,
        where: Optional['types.SurveyWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SurveyAvgAggregateInput'] = None,
        sum: Optional['types.SurveySumAggregateInput'] = None,
        min: Optional['types.SurveyMinAggregateInput'] = None,
        max: Optional['types.SurveyMaxAggregateInput'] = None,
        having: Optional['types.SurveyScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SurveyCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SurveyScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SurveyScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SurveyGroupByOutput']:
        """Group Survey records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Survey fields to group records by
        where
            Survey filter to select records
        take
            Limit the maximum number of Survey records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SurveyGroupByOutput]
            A list of dictionaries representing the Survey record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Survey records by SurveyID values
        # and count how many records are in each group
        results = await Survey.prisma().group_by(
            ['SurveyID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class QuestionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Question]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Question.prisma().query_raw(
            'SELECT * FROM Question WHERE QuestionID = $1',
            2111915288,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Question
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Question.prisma().query_first(
            'SELECT * FROM Question WHERE SurveyID = $1',
            1149758321,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.QuestionCreateInput,
        include: Optional[types.QuestionInclude] = None
    ) -> _PrismaModelT:
        """Create a new Question record.

        Parameters
        ----------
        data
            Question record data
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The created Question record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Question record from just the required fields
        question = await Question.prisma().create(
            data={
                # data to create a Question record
                'SurveyID': 1644289366,
                'Type': enums.enumQtype.Location,
                'Text': 'bdiicjafbj',
                'Order': 1647418052,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.QuestionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Question records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Question record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Question.prisma().create_many(
            data=[
                {
                    # data to create a Question record
                    'SurveyID': 1675546029,
                    'Type': enums.enumQtype.Location,
                    'Text': 'bhghchehcc',
                    'Order': 326272115,
                },
                {
                    # data to create a Question record
                    'SurveyID': 1343201072,
                    'Type': enums.enumQtype.Location,
                    'Text': 'ghfhiafcb',
                    'Order': 744964398,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Question record.

        Parameters
        ----------
        where
            Question filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The deleted Question record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().delete(
            where={
                'QuestionID': 1969681615,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Question record.

        Parameters
        ----------
        where
            Question filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The found Question record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().find_unique(
            where={
                'QuestionID': 1116175964,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Question record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Question filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The found Question record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().find_unique_or_raise(
            where={
                'QuestionID': 861472101,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Question records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Question records returned
        skip
            Ignore the first N results
        where
            Question filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Question]
            The list of all Question records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Question records
        questions = await Question.prisma().find_many(take=10)

        # find the first 5 Question records ordered by the Type field
        questions = await Question.prisma().find_many(
            take=5,
            order={
                'Type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Question record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Question filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Question
            The first Question record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Question record ordered by the Text field
        question = await Question.prisma().find_first(
            skip=1,
            order={
                'Text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
        include: Optional[types.QuestionInclude] = None,
        order: Optional[Union[types.QuestionOrderByInput, List[types.QuestionOrderByInput]]] = None,
        distinct: Optional[List[types.QuestionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Question record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Question filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Question model
        order
            Order the returned Question records by any field
        distinct
            Filter Question records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Question
            The first Question record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Question record ordered by the Order field
        question = await Question.prisma().find_first_or_raise(
            skip=1,
            order={
                'Order': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.QuestionUpdateInput,
        where: types.QuestionWhereUniqueInput,
        include: Optional[types.QuestionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Question record.

        Parameters
        ----------
        data
            Question record data specifying what to update
        where
            Question filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The updated Question record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        question = await Question.prisma().update(
            where={
                'QuestionID': 1303003706,
            },
            data={
                # data to update the Question record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.QuestionWhereUniqueInput,
        data: types.QuestionUpsertInput,
        include: Optional[types.QuestionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Question filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Question model

        Returns
        -------
        prisma.models.Question
            The created or updated Question record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        question = await Question.prisma().upsert(
            where={
                'QuestionID': 1686638315,
            },
            data={
                'create': {
                    'QuestionID': 1686638315,
                    'SurveyID': 1343201072,
                    'Type': enums.enumQtype.Location,
                    'Text': 'ghfhiafcb',
                    'Order': 744964398,
                },
                'update': {
                    'SurveyID': 1343201072,
                    'Type': enums.enumQtype.Location,
                    'Text': 'ghfhiafcb',
                    'Order': 744964398,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.QuestionUpdateManyMutationInput,
        where: types.QuestionWhereInput,
    ) -> int:
        """Update multiple Question records

        Parameters
        ----------
        data
            Question data to update the selected Question records to
        where
            Filter to select the Question records to update

        Returns
        -------
        int
            The total number of Question records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Question records
        total = await Question.prisma().update_many(
            data={
                'QuestionID': 2000430152
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Question records present in the database

        Parameters
        ----------
        select
            Select the Question fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Question filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.QuestionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Question.prisma().count()

        # results: prisma.types.QuestionCountAggregateOutput
        results = await Question.prisma().count(
            select={
                '_all': True,
                'SurveyID': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.QuestionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> types.QuestionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.QuestionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.QuestionWhereInput] = None,
        cursor: Optional[types.QuestionWhereUniqueInput] = None,
    ) -> Union[int, types.QuestionCountAggregateOutput]:
        """Count the number of Question records present in the database

        Parameters
        ----------
        select
            Select the Question fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Question filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.QuestionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Question.prisma().count()

        # results: prisma.types.QuestionCountAggregateOutput
        results = await Question.prisma().count(
            select={
                '_all': True,
                'Type': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.QuestionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.QuestionWhereInput] = None
    ) -> int:
        """Delete multiple Question records.

        Parameters
        ----------
        where
            Optional Question filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Question records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Question records
        total = await Question.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.QuestionScalarFieldKeys'],
        *,
        where: Optional['types.QuestionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.QuestionAvgAggregateInput'] = None,
        sum: Optional['types.QuestionSumAggregateInput'] = None,
        min: Optional['types.QuestionMinAggregateInput'] = None,
        max: Optional['types.QuestionMaxAggregateInput'] = None,
        having: Optional['types.QuestionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.QuestionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.QuestionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.QuestionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.QuestionGroupByOutput']:
        """Group Question records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Question fields to group records by
        where
            Question filter to select records
        take
            Limit the maximum number of Question records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.QuestionGroupByOutput]
            A list of dictionaries representing the Question record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Question records by Text values
        # and count how many records are in each group
        results = await Question.prisma().group_by(
            ['Text'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class OptionalAnswerActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.OptionalAnswer]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await OptionalAnswer.prisma().query_raw(
            'SELECT * FROM OptionalAnswer WHERE AnswerID = $1',
            1868141281,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.OptionalAnswer
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await OptionalAnswer.prisma().query_first(
            'SELECT * FROM OptionalAnswer WHERE QuestionID = $1',
            1860847622,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.OptionalAnswerCreateInput,
        include: Optional[types.OptionalAnswerInclude] = None
    ) -> _PrismaModelT:
        """Create a new OptionalAnswer record.

        Parameters
        ----------
        data
            OptionalAnswer record data
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The created OptionalAnswer record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a OptionalAnswer record from just the required fields
        optionalanswer = await OptionalAnswer.prisma().create(
            data={
                # data to create a OptionalAnswer record
                'QuestionID': 1448521415,
                'Text': 'bgcigfahea',
                'Order': 1249606685,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OptionalAnswerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple OptionalAnswer records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of OptionalAnswer record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await OptionalAnswer.prisma().create_many(
            data=[
                {
                    # data to create a OptionalAnswer record
                    'QuestionID': 835903122,
                    'Text': 'hgdhbjhhj',
                    'Order': 429995104,
                },
                {
                    # data to create a OptionalAnswer record
                    'QuestionID': 1775811865,
                    'Text': 'ijdbeffgg',
                    'Order': 995405759,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OptionalAnswerWhereUniqueInput,
        include: Optional[types.OptionalAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single OptionalAnswer record.

        Parameters
        ----------
        where
            OptionalAnswer filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The deleted OptionalAnswer record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        optionalanswer = await OptionalAnswer.prisma().delete(
            where={
                'AnswerID': 2102736524,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.OptionalAnswerWhereUniqueInput,
        include: Optional[types.OptionalAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique OptionalAnswer record.

        Parameters
        ----------
        where
            OptionalAnswer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The found OptionalAnswer record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        optionalanswer = await OptionalAnswer.prisma().find_unique(
            where={
                'AnswerID': 271520213,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.OptionalAnswerWhereUniqueInput,
        include: Optional[types.OptionalAnswerInclude] = None
    ) -> _PrismaModelT:
        """Find a unique OptionalAnswer record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            OptionalAnswer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The found OptionalAnswer record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        optionalanswer = await OptionalAnswer.prisma().find_unique_or_raise(
            where={
                'AnswerID': 456633834,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
        include: Optional[types.OptionalAnswerInclude] = None,
        order: Optional[Union[types.OptionalAnswerOrderByInput, List[types.OptionalAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.OptionalAnswerScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple OptionalAnswer records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of OptionalAnswer records returned
        skip
            Ignore the first N results
        where
            OptionalAnswer filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model
        order
            Order the returned OptionalAnswer records by any field
        distinct
            Filter OptionalAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.OptionalAnswer]
            The list of all OptionalAnswer records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 OptionalAnswer records
        optionalanswers = await OptionalAnswer.prisma().find_many(take=10)

        # find the first 5 OptionalAnswer records ordered by the Text field
        optionalanswers = await OptionalAnswer.prisma().find_many(
            take=5,
            order={
                'Text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
        include: Optional[types.OptionalAnswerInclude] = None,
        order: Optional[Union[types.OptionalAnswerOrderByInput, List[types.OptionalAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.OptionalAnswerScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single OptionalAnswer record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OptionalAnswer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model
        order
            Order the returned OptionalAnswer records by any field
        distinct
            Filter OptionalAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OptionalAnswer
            The first OptionalAnswer record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OptionalAnswer record ordered by the Order field
        optionalanswer = await OptionalAnswer.prisma().find_first(
            skip=1,
            order={
                'Order': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
        include: Optional[types.OptionalAnswerInclude] = None,
        order: Optional[Union[types.OptionalAnswerOrderByInput, List[types.OptionalAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.OptionalAnswerScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single OptionalAnswer record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            OptionalAnswer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model
        order
            Order the returned OptionalAnswer records by any field
        distinct
            Filter OptionalAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.OptionalAnswer
            The first OptionalAnswer record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second OptionalAnswer record ordered by the followingQuestionID field
        optionalanswer = await OptionalAnswer.prisma().find_first_or_raise(
            skip=1,
            order={
                'followingQuestionID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.OptionalAnswerUpdateInput,
        where: types.OptionalAnswerWhereUniqueInput,
        include: Optional[types.OptionalAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single OptionalAnswer record.

        Parameters
        ----------
        data
            OptionalAnswer record data specifying what to update
        where
            OptionalAnswer filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The updated OptionalAnswer record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        optionalanswer = await OptionalAnswer.prisma().update(
            where={
                'AnswerID': 2058258651,
            },
            data={
                # data to update the OptionalAnswer record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.OptionalAnswerWhereUniqueInput,
        data: types.OptionalAnswerUpsertInput,
        include: Optional[types.OptionalAnswerInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            OptionalAnswer filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned OptionalAnswer model

        Returns
        -------
        prisma.models.OptionalAnswer
            The created or updated OptionalAnswer record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        optionalanswer = await OptionalAnswer.prisma().upsert(
            where={
                'AnswerID': 1583689592,
            },
            data={
                'create': {
                    'AnswerID': 1583689592,
                    'QuestionID': 1775811865,
                    'Text': 'ijdbeffgg',
                    'Order': 995405759,
                },
                'update': {
                    'QuestionID': 1775811865,
                    'Text': 'ijdbeffgg',
                    'Order': 995405759,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.OptionalAnswerUpdateManyMutationInput,
        where: types.OptionalAnswerWhereInput,
    ) -> int:
        """Update multiple OptionalAnswer records

        Parameters
        ----------
        data
            OptionalAnswer data to update the selected OptionalAnswer records to
        where
            Filter to select the OptionalAnswer records to update

        Returns
        -------
        int
            The total number of OptionalAnswer records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all OptionalAnswer records
        total = await OptionalAnswer.prisma().update_many(
            data={
                'AnswerID': 878442065
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of OptionalAnswer records present in the database

        Parameters
        ----------
        select
            Select the OptionalAnswer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OptionalAnswer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OptionalAnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OptionalAnswer.prisma().count()

        # results: prisma.types.OptionalAnswerCountAggregateOutput
        results = await OptionalAnswer.prisma().count(
            select={
                '_all': True,
                'QuestionID': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.OptionalAnswerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
    ) -> types.OptionalAnswerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.OptionalAnswerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OptionalAnswerWhereInput] = None,
        cursor: Optional[types.OptionalAnswerWhereUniqueInput] = None,
    ) -> Union[int, types.OptionalAnswerCountAggregateOutput]:
        """Count the number of OptionalAnswer records present in the database

        Parameters
        ----------
        select
            Select the OptionalAnswer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            OptionalAnswer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OptionalAnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await OptionalAnswer.prisma().count()

        # results: prisma.types.OptionalAnswerCountAggregateOutput
        results = await OptionalAnswer.prisma().count(
            select={
                '_all': True,
                'Text': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.OptionalAnswerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.OptionalAnswerWhereInput] = None
    ) -> int:
        """Delete multiple OptionalAnswer records.

        Parameters
        ----------
        where
            Optional OptionalAnswer filter to find the records to be deleted

        Returns
        -------
        int
            The total number of OptionalAnswer records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all OptionalAnswer records
        total = await OptionalAnswer.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.OptionalAnswerScalarFieldKeys'],
        *,
        where: Optional['types.OptionalAnswerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.OptionalAnswerAvgAggregateInput'] = None,
        sum: Optional['types.OptionalAnswerSumAggregateInput'] = None,
        min: Optional['types.OptionalAnswerMinAggregateInput'] = None,
        max: Optional['types.OptionalAnswerMaxAggregateInput'] = None,
        having: Optional['types.OptionalAnswerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.OptionalAnswerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.OptionalAnswerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.OptionalAnswerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.OptionalAnswerGroupByOutput']:
        """Group OptionalAnswer records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar OptionalAnswer fields to group records by
        where
            OptionalAnswer filter to select records
        take
            Limit the maximum number of OptionalAnswer records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OptionalAnswerGroupByOutput]
            A list of dictionaries representing the OptionalAnswer record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group OptionalAnswer records by Order values
        # and count how many records are in each group
        results = await OptionalAnswer.prisma().group_by(
            ['Order'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserAnswerActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserAnswer]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserAnswer.prisma().query_raw(
            'SELECT * FROM UserAnswer WHERE PersonID = $1',
            1675280054,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserAnswer
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserAnswer.prisma().query_first(
            'SELECT * FROM UserAnswer WHERE QuestionID = $1',
            1627576247,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserAnswerCreateInput,
        include: Optional[types.UserAnswerInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserAnswer record.

        Parameters
        ----------
        data
            UserAnswer record data
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The created UserAnswer record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserAnswer record from just the required fields
        useranswer = await UserAnswer.prisma().create(
            data={
                # data to create a UserAnswer record
                'PersonID': 2054802212,
                'QuestionID': 60335757,
                'AnswerID': 684462146,
                'Timestamp': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserAnswerCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserAnswer records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserAnswer record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserAnswer.prisma().create_many(
            data=[
                {
                    # data to create a UserAnswer record
                    'PersonID': 1625503827,
                    'QuestionID': 521827728,
                    'AnswerID': 1266032265,
                    'Timestamp': datetime.datetime.utcnow(),
                },
                {
                    # data to create a UserAnswer record
                    'PersonID': 93253262,
                    'QuestionID': 2053047983,
                    'AnswerID': 685333180,
                    'Timestamp': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserAnswerWhereUniqueInput,
        include: Optional[types.UserAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserAnswer record.

        Parameters
        ----------
        where
            UserAnswer filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The deleted UserAnswer record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswer = await UserAnswer.prisma().delete(
            where={
                # UserAnswer where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserAnswerWhereUniqueInput,
        include: Optional[types.UserAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserAnswer record.

        Parameters
        ----------
        where
            UserAnswer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The found UserAnswer record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswer = await UserAnswer.prisma().find_unique(
            where={
                # UserAnswer where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserAnswerWhereUniqueInput,
        include: Optional[types.UserAnswerInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserAnswer record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserAnswer filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The found UserAnswer record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswer = await UserAnswer.prisma().find_unique_or_raise(
            where={
                # UserAnswer where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
        include: Optional[types.UserAnswerInclude] = None,
        order: Optional[Union[types.UserAnswerOrderByInput, List[types.UserAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserAnswer records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserAnswer records returned
        skip
            Ignore the first N results
        where
            UserAnswer filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswer model
        order
            Order the returned UserAnswer records by any field
        distinct
            Filter UserAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserAnswer]
            The list of all UserAnswer records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserAnswer records
        useranswers = await UserAnswer.prisma().find_many(take=10)

        # find the first 5 UserAnswer records ordered by the AnswerID field
        useranswers = await UserAnswer.prisma().find_many(
            take=5,
            order={
                'AnswerID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
        include: Optional[types.UserAnswerInclude] = None,
        order: Optional[Union[types.UserAnswerOrderByInput, List[types.UserAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserAnswer record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAnswer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswer model
        order
            Order the returned UserAnswer records by any field
        distinct
            Filter UserAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAnswer
            The first UserAnswer record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAnswer record ordered by the Text field
        useranswer = await UserAnswer.prisma().find_first(
            skip=1,
            order={
                'Text': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
        include: Optional[types.UserAnswerInclude] = None,
        order: Optional[Union[types.UserAnswerOrderByInput, List[types.UserAnswerOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserAnswer record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAnswer filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswer model
        order
            Order the returned UserAnswer records by any field
        distinct
            Filter UserAnswer records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAnswer
            The first UserAnswer record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAnswer record ordered by the Location field
        useranswer = await UserAnswer.prisma().find_first_or_raise(
            skip=1,
            order={
                'Location': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserAnswerUpdateInput,
        where: types.UserAnswerWhereUniqueInput,
        include: Optional[types.UserAnswerInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserAnswer record.

        Parameters
        ----------
        data
            UserAnswer record data specifying what to update
        where
            UserAnswer filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The updated UserAnswer record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        useranswer = await UserAnswer.prisma().update(
            where={
                # UserAnswer where unique filter

            },
            data={
                # data to update the UserAnswer record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserAnswerWhereUniqueInput,
        data: types.UserAnswerUpsertInput,
        include: Optional[types.UserAnswerInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserAnswer filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserAnswer model

        Returns
        -------
        prisma.models.UserAnswer
            The created or updated UserAnswer record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswer = await UserAnswer.prisma().upsert(
            where={
                # UserAnswer where unique filter
            },
            data={
                'create': {
                    # UserAnswer data to be set if the record does not exist
                },
                'update': {
                    # UserAnswer data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserAnswerUpdateManyMutationInput,
        where: types.UserAnswerWhereInput,
    ) -> int:
        """Update multiple UserAnswer records

        Parameters
        ----------
        data
            UserAnswer data to update the selected UserAnswer records to
        where
            Filter to select the UserAnswer records to update

        Returns
        -------
        int
            The total number of UserAnswer records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserAnswer records
        total = await UserAnswer.prisma().update_many(
            data={
                'Timestamp': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserAnswer records present in the database

        Parameters
        ----------
        select
            Select the UserAnswer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAnswer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAnswer.prisma().count()

        # results: prisma.types.UserAnswerCountAggregateOutput
        results = await UserAnswer.prisma().count(
            select={
                '_all': True,
                'PersonID': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserAnswerCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
    ) -> types.UserAnswerCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserAnswerCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerWhereInput] = None,
        cursor: Optional[types.UserAnswerWhereUniqueInput] = None,
    ) -> Union[int, types.UserAnswerCountAggregateOutput]:
        """Count the number of UserAnswer records present in the database

        Parameters
        ----------
        select
            Select the UserAnswer fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAnswer filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAnswerCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAnswer.prisma().count()

        # results: prisma.types.UserAnswerCountAggregateOutput
        results = await UserAnswer.prisma().count(
            select={
                '_all': True,
                'QuestionID': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserAnswerCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserAnswerWhereInput] = None
    ) -> int:
        """Delete multiple UserAnswer records.

        Parameters
        ----------
        where
            Optional UserAnswer filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserAnswer records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserAnswer records
        total = await UserAnswer.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserAnswerScalarFieldKeys'],
        *,
        where: Optional['types.UserAnswerWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAnswerAvgAggregateInput'] = None,
        sum: Optional['types.UserAnswerSumAggregateInput'] = None,
        min: Optional['types.UserAnswerMinAggregateInput'] = None,
        max: Optional['types.UserAnswerMaxAggregateInput'] = None,
        having: Optional['types.UserAnswerScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserAnswerCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserAnswerScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserAnswerScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserAnswerGroupByOutput']:
        """Group UserAnswer records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserAnswer fields to group records by
        where
            UserAnswer filter to select records
        take
            Limit the maximum number of UserAnswer records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserAnswerGroupByOutput]
            A list of dictionaries representing the UserAnswer record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserAnswer records by AnswerID values
        # and count how many records are in each group
        results = await UserAnswer.prisma().group_by(
            ['AnswerID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserAnswerNewActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserAnswerNew]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserAnswerNew.prisma().query_raw(
            'SELECT * FROM UserAnswerNew WHERE id = $1',
            127474245,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserAnswerNew
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserAnswerNew.prisma().query_first(
            'SELECT * FROM UserAnswerNew WHERE idNumber = $1',
            'jeijcbhfe',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserAnswerNewCreateInput,
        include: Optional[types.UserAnswerNewInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserAnswerNew record.

        Parameters
        ----------
        data
            UserAnswerNew record data
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The created UserAnswerNew record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserAnswerNew record from just the required fields
        useranswernew = await UserAnswerNew.prisma().create(
            data={
                # data to create a UserAnswerNew record
                'idNumber': 'bjgejjabff',
                'fullName': 'bcciijbibg',
                'settlementCode': 255202753,
                'accessibility': True,
                'pets': False,
                'numberOfPeople': 1064846676,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserAnswerNewCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserAnswerNew records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserAnswerNew record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserAnswerNew.prisma().create_many(
            data=[
                {
                    # data to create a UserAnswerNew record
                    'idNumber': 'faidicegb',
                    'fullName': 'bacecgfhbe',
                    'settlementCode': 872078403,
                    'accessibility': True,
                    'pets': False,
                    'numberOfPeople': 769267518,
                },
                {
                    # data to create a UserAnswerNew record
                    'idNumber': 'icadbcehj',
                    'fullName': 'jchciaee',
                    'settlementCode': 344858293,
                    'accessibility': True,
                    'pets': False,
                    'numberOfPeople': 208521688,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserAnswerNewWhereUniqueInput,
        include: Optional[types.UserAnswerNewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserAnswerNew record.

        Parameters
        ----------
        where
            UserAnswerNew filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The deleted UserAnswerNew record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswernew = await UserAnswerNew.prisma().delete(
            where={
                'id': 860811569,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserAnswerNewWhereUniqueInput,
        include: Optional[types.UserAnswerNewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserAnswerNew record.

        Parameters
        ----------
        where
            UserAnswerNew filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The found UserAnswerNew record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswernew = await UserAnswerNew.prisma().find_unique(
            where={
                'id': 1660932118,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserAnswerNewWhereUniqueInput,
        include: Optional[types.UserAnswerNewInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserAnswerNew record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserAnswerNew filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The found UserAnswerNew record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswernew = await UserAnswerNew.prisma().find_unique_or_raise(
            where={
                'id': 525761943,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
        include: Optional[types.UserAnswerNewInclude] = None,
        order: Optional[Union[types.UserAnswerNewOrderByInput, List[types.UserAnswerNewOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerNewScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserAnswerNew records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserAnswerNew records returned
        skip
            Ignore the first N results
        where
            UserAnswerNew filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model
        order
            Order the returned UserAnswerNew records by any field
        distinct
            Filter UserAnswerNew records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserAnswerNew]
            The list of all UserAnswerNew records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserAnswerNew records
        useranswernews = await UserAnswerNew.prisma().find_many(take=10)

        # find the first 5 UserAnswerNew records ordered by the fullName field
        useranswernews = await UserAnswerNew.prisma().find_many(
            take=5,
            order={
                'fullName': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
        include: Optional[types.UserAnswerNewInclude] = None,
        order: Optional[Union[types.UserAnswerNewOrderByInput, List[types.UserAnswerNewOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerNewScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserAnswerNew record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAnswerNew filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model
        order
            Order the returned UserAnswerNew records by any field
        distinct
            Filter UserAnswerNew records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAnswerNew
            The first UserAnswerNew record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAnswerNew record ordered by the settlementCode field
        useranswernew = await UserAnswerNew.prisma().find_first(
            skip=1,
            order={
                'settlementCode': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
        include: Optional[types.UserAnswerNewInclude] = None,
        order: Optional[Union[types.UserAnswerNewOrderByInput, List[types.UserAnswerNewOrderByInput]]] = None,
        distinct: Optional[List[types.UserAnswerNewScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserAnswerNew record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAnswerNew filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model
        order
            Order the returned UserAnswerNew records by any field
        distinct
            Filter UserAnswerNew records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAnswerNew
            The first UserAnswerNew record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAnswerNew record ordered by the accessibility field
        useranswernew = await UserAnswerNew.prisma().find_first_or_raise(
            skip=1,
            order={
                'accessibility': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserAnswerNewUpdateInput,
        where: types.UserAnswerNewWhereUniqueInput,
        include: Optional[types.UserAnswerNewInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserAnswerNew record.

        Parameters
        ----------
        data
            UserAnswerNew record data specifying what to update
        where
            UserAnswerNew filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The updated UserAnswerNew record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        useranswernew = await UserAnswerNew.prisma().update(
            where={
                'id': 736209796,
            },
            data={
                # data to update the UserAnswerNew record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserAnswerNewWhereUniqueInput,
        data: types.UserAnswerNewUpsertInput,
        include: Optional[types.UserAnswerNewInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserAnswerNew filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserAnswerNew model

        Returns
        -------
        prisma.models.UserAnswerNew
            The created or updated UserAnswerNew record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useranswernew = await UserAnswerNew.prisma().upsert(
            where={
                'id': 493907821,
            },
            data={
                'create': {
                    'id': 493907821,
                    'idNumber': 'icadbcehj',
                    'fullName': 'jchciaee',
                    'settlementCode': 344858293,
                    'accessibility': True,
                    'pets': False,
                    'numberOfPeople': 208521688,
                },
                'update': {
                    'idNumber': 'icadbcehj',
                    'fullName': 'jchciaee',
                    'settlementCode': 344858293,
                    'accessibility': True,
                    'pets': False,
                    'numberOfPeople': 208521688,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserAnswerNewUpdateManyMutationInput,
        where: types.UserAnswerNewWhereInput,
    ) -> int:
        """Update multiple UserAnswerNew records

        Parameters
        ----------
        data
            UserAnswerNew data to update the selected UserAnswerNew records to
        where
            Filter to select the UserAnswerNew records to update

        Returns
        -------
        int
            The total number of UserAnswerNew records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserAnswerNew records
        total = await UserAnswerNew.prisma().update_many(
            data={
                'pets': True
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserAnswerNew records present in the database

        Parameters
        ----------
        select
            Select the UserAnswerNew fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAnswerNew filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAnswerNewCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAnswerNew.prisma().count()

        # results: prisma.types.UserAnswerNewCountAggregateOutput
        results = await UserAnswerNew.prisma().count(
            select={
                '_all': True,
                'numberOfPeople': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserAnswerNewCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
    ) -> types.UserAnswerNewCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserAnswerNewCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAnswerNewWhereInput] = None,
        cursor: Optional[types.UserAnswerNewWhereUniqueInput] = None,
    ) -> Union[int, types.UserAnswerNewCountAggregateOutput]:
        """Count the number of UserAnswerNew records present in the database

        Parameters
        ----------
        select
            Select the UserAnswerNew fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAnswerNew filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAnswerNewCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAnswerNew.prisma().count()

        # results: prisma.types.UserAnswerNewCountAggregateOutput
        results = await UserAnswerNew.prisma().count(
            select={
                '_all': True,
                'hotelOption1': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserAnswerNewCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserAnswerNewWhereInput] = None
    ) -> int:
        """Delete multiple UserAnswerNew records.

        Parameters
        ----------
        where
            Optional UserAnswerNew filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserAnswerNew records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserAnswerNew records
        total = await UserAnswerNew.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserAnswerNewScalarFieldKeys'],
        *,
        where: Optional['types.UserAnswerNewWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAnswerNewAvgAggregateInput'] = None,
        sum: Optional['types.UserAnswerNewSumAggregateInput'] = None,
        min: Optional['types.UserAnswerNewMinAggregateInput'] = None,
        max: Optional['types.UserAnswerNewMaxAggregateInput'] = None,
        having: Optional['types.UserAnswerNewScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserAnswerNewCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserAnswerNewScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserAnswerNewScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserAnswerNewGroupByOutput']:
        """Group UserAnswerNew records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserAnswerNew fields to group records by
        where
            UserAnswerNew filter to select records
        take
            Limit the maximum number of UserAnswerNew records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserAnswerNewGroupByOutput]
            A list of dictionaries representing the UserAnswerNew record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserAnswerNew records by hotelOption2 values
        # and count how many records are in each group
        results = await UserAnswerNew.prisma().group_by(
            ['hotelOption2'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SettlementActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Settlement]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Settlement.prisma().query_raw(
            'SELECT * FROM Settlement WHERE id = $1',
            654007347,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Settlement
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Settlement.prisma().query_first(
            'SELECT * FROM Settlement WHERE code = $1',
            1905261552,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SettlementCreateInput,
        include: Optional[types.SettlementInclude] = None
    ) -> _PrismaModelT:
        """Create a new Settlement record.

        Parameters
        ----------
        data
            Settlement record data
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The created Settlement record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Settlement record from just the required fields
        settlement = await Settlement.prisma().create(
            data={
                # data to create a Settlement record
                'code': 78746985,
                'name': 'bdjidcidac',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SettlementCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Settlement records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Settlement record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Settlement.prisma().create_many(
            data=[
                {
                    # data to create a Settlement record
                    'code': 856000655,
                    'name': 'befcddgjce',
                },
                {
                    # data to create a Settlement record
                    'code': 1573199653,
                    'name': 'cabdjadaji',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SettlementWhereUniqueInput,
        include: Optional[types.SettlementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Settlement record.

        Parameters
        ----------
        where
            Settlement filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The deleted Settlement record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        settlement = await Settlement.prisma().delete(
            where={
                'id': 500965035,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SettlementWhereUniqueInput,
        include: Optional[types.SettlementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Settlement record.

        Parameters
        ----------
        where
            Settlement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The found Settlement record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        settlement = await Settlement.prisma().find_unique(
            where={
                'id': 1800624392,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SettlementWhereUniqueInput,
        include: Optional[types.SettlementInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Settlement record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Settlement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The found Settlement record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        settlement = await Settlement.prisma().find_unique_or_raise(
            where={
                'id': 2077067425,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
        include: Optional[types.SettlementInclude] = None,
        order: Optional[Union[types.SettlementOrderByInput, List[types.SettlementOrderByInput]]] = None,
        distinct: Optional[List[types.SettlementScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Settlement records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Settlement records returned
        skip
            Ignore the first N results
        where
            Settlement filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Settlement model
        order
            Order the returned Settlement records by any field
        distinct
            Filter Settlement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Settlement]
            The list of all Settlement records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Settlement records
        settlements = await Settlement.prisma().find_many(take=10)

        # find the first 5 Settlement records ordered by the name field
        settlements = await Settlement.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
        include: Optional[types.SettlementInclude] = None,
        order: Optional[Union[types.SettlementOrderByInput, List[types.SettlementOrderByInput]]] = None,
        distinct: Optional[List[types.SettlementScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Settlement record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Settlement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Settlement model
        order
            Order the returned Settlement records by any field
        distinct
            Filter Settlement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Settlement
            The first Settlement record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Settlement record ordered by the alias1 field
        settlement = await Settlement.prisma().find_first(
            skip=1,
            order={
                'alias1': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
        include: Optional[types.SettlementInclude] = None,
        order: Optional[Union[types.SettlementOrderByInput, List[types.SettlementOrderByInput]]] = None,
        distinct: Optional[List[types.SettlementScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Settlement record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Settlement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Settlement model
        order
            Order the returned Settlement records by any field
        distinct
            Filter Settlement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Settlement
            The first Settlement record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Settlement record ordered by the alias2 field
        settlement = await Settlement.prisma().find_first_or_raise(
            skip=1,
            order={
                'alias2': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SettlementUpdateInput,
        where: types.SettlementWhereUniqueInput,
        include: Optional[types.SettlementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Settlement record.

        Parameters
        ----------
        data
            Settlement record data specifying what to update
        where
            Settlement filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The updated Settlement record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        settlement = await Settlement.prisma().update(
            where={
                'id': 1672112838,
            },
            data={
                # data to update the Settlement record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SettlementWhereUniqueInput,
        data: types.SettlementUpsertInput,
        include: Optional[types.SettlementInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Settlement filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Settlement model

        Returns
        -------
        prisma.models.Settlement
            The created or updated Settlement record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        settlement = await Settlement.prisma().upsert(
            where={
                'id': 926677639,
            },
            data={
                'create': {
                    'id': 926677639,
                    'code': 1573199653,
                    'name': 'cabdjadaji',
                },
                'update': {
                    'code': 1573199653,
                    'name': 'cabdjadaji',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SettlementUpdateManyMutationInput,
        where: types.SettlementWhereInput,
    ) -> int:
        """Update multiple Settlement records

        Parameters
        ----------
        data
            Settlement data to update the selected Settlement records to
        where
            Filter to select the Settlement records to update

        Returns
        -------
        int
            The total number of Settlement records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Settlement records
        total = await Settlement.prisma().update_many(
            data={
                'alias3': 'beehgcebbg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Settlement records present in the database

        Parameters
        ----------
        select
            Select the Settlement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Settlement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SettlementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Settlement.prisma().count()

        # results: prisma.types.SettlementCountAggregateOutput
        results = await Settlement.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SettlementCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
    ) -> types.SettlementCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SettlementCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SettlementWhereInput] = None,
        cursor: Optional[types.SettlementWhereUniqueInput] = None,
    ) -> Union[int, types.SettlementCountAggregateOutput]:
        """Count the number of Settlement records present in the database

        Parameters
        ----------
        select
            Select the Settlement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Settlement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SettlementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Settlement.prisma().count()

        # results: prisma.types.SettlementCountAggregateOutput
        results = await Settlement.prisma().count(
            select={
                '_all': True,
                'code': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SettlementCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SettlementWhereInput] = None
    ) -> int:
        """Delete multiple Settlement records.

        Parameters
        ----------
        where
            Optional Settlement filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Settlement records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Settlement records
        total = await Settlement.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SettlementScalarFieldKeys'],
        *,
        where: Optional['types.SettlementWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SettlementAvgAggregateInput'] = None,
        sum: Optional['types.SettlementSumAggregateInput'] = None,
        min: Optional['types.SettlementMinAggregateInput'] = None,
        max: Optional['types.SettlementMaxAggregateInput'] = None,
        having: Optional['types.SettlementScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SettlementCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SettlementScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SettlementScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SettlementGroupByOutput']:
        """Group Settlement records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Settlement fields to group records by
        where
            Settlement filter to select records
        take
            Limit the maximum number of Settlement records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SettlementGroupByOutput]
            A list of dictionaries representing the Settlement record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Settlement records by name values
        # and count how many records are in each group
        results = await Settlement.prisma().group_by(
            ['name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models